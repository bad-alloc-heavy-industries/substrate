// SPDX-License-Identifier: BSD-3-Clause
#ifndef SUBSTRATE_ENUM_UTILS
#define SUBSTRATE_ENUM_UTILS

#include <algorithm>
#include <cstdint>
#include <iostream>
#include <memory>
#include <sstream>
#include <stdexcept>
#include <string>
#include <vector>

#include <substrate/internal/defs>
#include <substrate/utility>

namespace substrate
{
	template<typename F> struct enableEnumBitmask_t
		{ static constexpr bool enabled = false; };

	template<class T> struct enumPair_t final
	{
		using value_type = T;
	private:
		T _value;
		const char* _name;
	public:
		constexpr enumPair_t() noexcept : _value{}, _name{} { }
		constexpr enumPair_t(T value, const char* name) noexcept : _value{value}, _name{name} { }

		void value(const T value) noexcept { _value = value; }
		SUBSTRATE_NO_DISCARD(T value() const noexcept) { return _value; }

		void name(const char* name) noexcept { _name = name; }
		SUBSTRATE_NO_DISCARD(const char* name() const noexcept) { return _name; }
	};

	/* Extract a collection of flags set in a field */
	/* This is kind of expensive run-time wise, being at leas O(n+1) but *shrug* */
	template<typename T, typename A> enable_if_t<std::is_enum<T>::value, std::vector<T>>
		extract_flags(T flags, const A &enumTable)
	{
		std::vector<T> foundFlags{};
		using enumInt_t = typename substrate::underlying_type_t<T>;
		for (auto flag : enumTable)
		{
			if ((flags & flag.value()) == flag.value() && static_cast<enumInt_t>(flag.value()) != 0)
				foundFlags.emplace_back(flag.value());
		}

		if (foundFlags.empty())
			foundFlags.emplace_back(T{});
		return foundFlags;
	}

	template<typename T, typename A> enable_if_t<std::is_enum<T>::value, std::vector<enumPair_t<T>>>
		extract_flag_pairs(T flags, const A &enumTable)
	{
		std::vector<enumPair_t<T>> foundFlags{};
		using enumInt_t = typename substrate::underlying_type_t<T>;
		for (auto flag : enumTable)
		{
			if ((flags & flag.value()) == flag.value() && static_cast<enumInt_t>(flag.value()) != 0)
				foundFlags.emplace_back(flag);
		}

		if (foundFlags.size() == 0)
			foundFlags.emplace_back(enumTable[0]);
		return foundFlags;
	}

	template<class map_t, class value_t> std::string enum_name(map_t map, value_t value) noexcept
	{
		auto pos = std::find_if(std::begin(map), std::end(map),
			[&](const typename map_t::value_type &entry)
				{ return (entry.value() == value); }
		);
		return pos != std::end(map) ? pos->name() : "UNKNOWN";
	}

	template<class map_t>
	typename map_t::value_type::value_type enum_value(map_t map, const std::string &name) noexcept
	{
		auto pos = std::find_if(std::begin(map), std::end(map),
			[&](const typename map_t::value_type &entry)
				{ return (entry.name() == name); }
		);

		return pos != std::end(map) ? pos->value() :
			static_cast<typename map_t::value_type::value_type>(0);
	}
}

template<typename F> substrate::enable_if_t<substrate::enableEnumBitmask_t<F>::enabled, F>
	operator |(const F lh, const F rh)
{
	using utype = typename substrate::underlying_type_t<F>;
	return static_cast<F>(static_cast<utype>(lh) | static_cast<utype>(rh));
}

template<typename F1, typename F2> substrate::enable_if_t<substrate::enableEnumBitmask_t<F1>::enabled &&
	std::is_integral<F2>::value, F1> operator |(const F1 lh, const F2 rh)
{
	using utype = typename substrate::underlying_type_t<F1>;
	return static_cast<F1>(static_cast<utype>(lh) | rh);
}

template<typename F1, typename F2> substrate::enable_if_t<substrate::enableEnumBitmask_t<F2>::enabled &&
	std::is_integral<F1>::value, F2> operator |(const F1 lh, const F2 rh)
{
	using utype = typename substrate::underlying_type_t<F2>;
	return static_cast<F2>(lh | static_cast<utype>(rh));
}

template<typename F> substrate::enable_if_t<substrate::enableEnumBitmask_t<F>::enabled, F>
	operator &(const F lh, const F rh)
{
	using utype = typename substrate::underlying_type_t<F>;
	return static_cast<F>(static_cast<utype>(lh) & static_cast<utype>(rh));
}

template<typename F1, typename F2> substrate::enable_if_t<substrate::enableEnumBitmask_t<F1>::enabled &&
	std::is_integral<F2>::value, F1> operator &(const F1 lh, const F2 rh)
{
	using utype = typename substrate::underlying_type_t<F1>;
	return static_cast<F1>(static_cast<utype>(lh) & rh);
}

template<typename F1, typename F2> substrate::enable_if_t<substrate::enableEnumBitmask_t<F2>::enabled &&
	std::is_integral<F1>::value, F2> operator &(const F1 lh, const F2 rh)
{
	using utype = typename substrate::underlying_type_t<F2>;
	return static_cast<F2>(lh & static_cast<utype>(rh));
}

template<typename F> substrate::enable_if_t<substrate::enableEnumBitmask_t<F>::enabled, F>
	operator ~(const F en)
{
	using utype = typename substrate::underlying_type_t<F>;
	return static_cast<F>(~static_cast<utype>(en));
}

template<typename F> substrate::enable_if_t<substrate::enableEnumBitmask_t<F>::enabled, F>
	operator ^(const F lh, const F rh)
{
	using utype = typename substrate::underlying_type_t<F>;
	return static_cast<F>(static_cast<utype>(lh) ^ static_cast<utype>(rh));
}

template<typename F1, typename F2> substrate::enable_if_t<substrate::enableEnumBitmask_t<F1>::enabled &&
	std::is_integral<F2>::value, F1> operator ^(const F1 lh, const F2 rh)
{
	using utype = typename substrate::underlying_type_t<F1>;
	return static_cast<F1>(static_cast<utype>(lh) ^ rh);
}

template<typename F1, typename F2> substrate::enable_if_t<substrate::enableEnumBitmask_t<F2>::enabled &&
	std::is_integral<F1>::value, F2> operator ^(const F1 lh, const F2 rh)
{
	using utype = typename substrate::underlying_type_t<F2>;
	return static_cast<F2>(lh ^ static_cast<utype>(rh));
}

template<typename F> substrate::enable_if_t<substrate::enableEnumBitmask_t<F>::enabled, F &>
	operator |=(F &lh, const F rh)
{
	using utype = typename substrate::underlying_type_t<F>;
	return lh = static_cast<F>(static_cast<utype>(lh) | static_cast<utype>(rh));
}

template<typename F1, typename F2> substrate::enable_if_t<substrate::enableEnumBitmask_t<F1>::enabled &&
	std::is_integral<F2>::value, F1 &> operator |=(F1 &lh, const F2 rh)
{
	using utype = typename substrate::underlying_type_t<F1>;
	return lh = static_cast<F1>(static_cast<utype>(lh) | rh);
}

template<typename F1, typename F2> substrate::enable_if_t<substrate::enableEnumBitmask_t<F2>::enabled &&
	std::is_integral<F1>::value, F1 &> operator |=(F1 &lh, const F2 rh)
{
	using utype = typename substrate::underlying_type_t<F2>;
	return lh = (lh | static_cast<utype>(rh));
}

template<typename F> substrate::enable_if_t<substrate::enableEnumBitmask_t<F>::enabled, F &>
	operator &=(F &lh, const F rh)
{
	using utype = typename substrate::underlying_type_t<F>;
	return lh = static_cast<F>(static_cast<utype>(lh) & static_cast<utype>(rh));
}

template<typename F1, typename F2> substrate::enable_if_t<substrate::enableEnumBitmask_t<F1>::enabled &&
	std::is_integral<F2>::value, F1 &> operator &=(F1 &lh, const F2 rh)
{
	using utype = typename substrate::underlying_type_t<F1>;
	return lh = static_cast<F1>(static_cast<utype>(lh) & rh);
}

template<typename F1, typename F2> substrate::enable_if_t<substrate::enableEnumBitmask_t<F2>::enabled &&
	std::is_integral<F1>::value, F1 &> operator &=(F1 &lh, const F2 rh)
{
	using utype = typename substrate::underlying_type_t<F2>;
	return lh = (lh & static_cast<utype>(rh));
}

template<typename F> substrate::enable_if_t<substrate::enableEnumBitmask_t<F>::enabled, F &>
	operator ^=(F &lh, const F rh)
{
	using utype = typename substrate::underlying_type_t<F>;
	return lh = static_cast<F>(static_cast<utype>(lh) ^ static_cast<utype>(rh));
}

template<typename F1, typename F2> substrate::enable_if_t<substrate::enableEnumBitmask_t<F1>::enabled &&
	std::is_integral<F2>::value, F1 &> operator ^=(F1 &lh, const F2 rh)
{
	using utype = typename substrate::underlying_type_t<F1>;
	return lh = static_cast<F1>(static_cast<utype>(lh) ^ rh);
}

template<typename F1, typename F2> substrate::enable_if_t<substrate::enableEnumBitmask_t<F2>::enabled &&
	std::is_integral<F1>::value, F1 &> operator ^=(F1 &lh, const F2 rh)
{
	using utype = typename substrate::underlying_type_t<F2>;
	return lh = (lh ^ static_cast<utype>(rh));
}

#endif /* SUBSTRATE_ENUM_UTILS */
/* vim: set ft=cpp ts=4 sw=4 noexpandtab: */
