// SPDX-License-Identifier: BSD-3-Clause
#ifndef SUBSTRATE_HASH
#define SUBSTRATE_HASH

#include <array>
#include <cstddef>
#include <cstdint>
#include <cstring>
#include <limits>
#include <type_traits>

#include "substrate/internal/defs"
#include "substrate/bits"
#include "substrate/utility"

namespace substrate
{
	using substrate::rotl;

	namespace
	{
		inline std::uint64_t fmix(std::uint64_t k)
		{
			k ^= k >> 33;
			k *= 0xFF51AFD7ED558CCDULL;
			k ^= k >> 33;
			k *= 0xC4CEB9FE1A85EC53ULL;
			k ^= k >> 33;
			return k;
		}
	}

	template<typename Sized> std::pair<std::uint64_t, std::uint64_t>
		murmur128(const Sized& input, const uint32_t seed) noexcept
	{
		const std::uint64_t len{sizeof(typename Sized::value_type) * substrate::size(input)};
		const size_t blk_count{len / 16};
		static constexpr std::uint64_t c1{UINT64_C(0x87C37B91114253D5)};
		static constexpr std::uint64_t c2{UINT64_C(0x4CF5AD432745937F)};
		const auto *const data{static_cast<const uint8_t*>(static_cast<const void*>(input.data()))};

		std::uint64_t h1{seed};
		std::uint64_t h2{seed};

		for (size_t idx{}; idx < blk_count; ++idx)
		{
			std::uint64_t k1{};
			std::uint64_t k2{};

			std::memcpy(&k1, data + (idx * sizeof(std::uint64_t) * 2), sizeof(std::uint64_t));
			std::memcpy(&k2, data + (idx * sizeof(std::uint64_t) * 2 + 1), sizeof(std::uint64_t));

			k1 *= c1;
			k1 = rotl(k1, 31);
			k1 *= c2;
			h1 ^= k1;

			h1 = rotl(h1, 27);
			h1 += h2;
			h1 = h1 * 5 + 0x52DCE729;

			k2 *= c2;
			k2 = rotl(k2, 33);
			k2 *= c1;
			h2 ^= k2;

			h2 = rotl(h2, 31);
			h2 += h1;
			h2 = h2 * 5 + 0x38495AB5;
		}

		const uint8_t* tail = data + blk_count * 16;

		std::uint64_t k1{};
		std::uint64_t k2{};

		switch (len & 15)
		{
			case 15:
				k2 ^= std::uint64_t(tail[14]) << 48;
				SUBSTRATE_FALLTHROUGH();
			case 14:
				k2 ^= std::uint64_t(tail[13]) << 40;
				SUBSTRATE_FALLTHROUGH();
			case 13:
				k2 ^= std::uint64_t(tail[12]) << 32;
				SUBSTRATE_FALLTHROUGH();
			case 12:
				k2 ^= std::uint64_t(tail[11]) << 24;
				SUBSTRATE_FALLTHROUGH();
			case 11:
				k2 ^= std::uint64_t(tail[10]) << 16;
				SUBSTRATE_FALLTHROUGH();
			case 10:
				k2 ^= std::uint64_t(tail[9]) << 8;
				SUBSTRATE_FALLTHROUGH();
			case 9:
				k2 ^= std::uint64_t(tail[8]);
				k2 *= c2;
				k2 = rotl(k2, 33);
				k2 *= c1;
				h2 ^= k2;
				SUBSTRATE_FALLTHROUGH();
			case 8:
				k1 ^= std::uint64_t(tail[7]) << 56;
				SUBSTRATE_FALLTHROUGH();
			case 7:
				k1 ^= std::uint64_t(tail[6]) << 48;
				SUBSTRATE_FALLTHROUGH();
			case 6:
				k1 ^= std::uint64_t(tail[5]) << 40;
				SUBSTRATE_FALLTHROUGH();
			case 5:
				k1 ^= std::uint64_t(tail[4]) << 32;
				SUBSTRATE_FALLTHROUGH();
			case 4:
				k1 ^= std::uint64_t(tail[3]) << 24;
				SUBSTRATE_FALLTHROUGH();
			case 3:
				k1 ^= std::uint64_t(tail[2]) << 16;
				SUBSTRATE_FALLTHROUGH();
			case 2:
				k1 ^= std::uint64_t(tail[1]) << 8;
				SUBSTRATE_FALLTHROUGH();
			case 1:
				k1 ^= std::uint64_t(tail[0]);
				k1 *= c1;
				k1 = rotl(k1, 31);
				k1 *= c2;
				h1 ^= k1;
		}

		h1 ^= len;
		h2 ^= len;

		h1 += h2;
		h2 += h1;

		h1 = fmix(h1);
		h2 = fmix(h2);

		h1 += h2;
		h2 += h1;

		return {h1, h2};
	}

	/* Checksums */
	std::uint16_t sysv_checksum(const std::uint8_t* bytes, std::size_t len) noexcept
	{
		constexpr auto m32 = std::numeric_limits<std::uint32_t>::max();
		constexpr auto m16 = std::numeric_limits<std::uint16_t>::max();
		if (!bytes)
			return {};

		std::uint32_t sum{};
		for (std::size_t i{}; i < len; ++i)
			sum += *(bytes + i);
		std::uint32_t res = sum % m16 + (sum % m32) / m16;

		return std::uint16_t((res % m16) + res / m16);
	}

	template<typename Sized> inline uint16_t sysv_checksum(const Sized &data) noexcept
	{
		// NOLINTNEXTLINE(cppcoreguidelines-pro-type-reinterpret-cast)
		return sysv_checksum(reinterpret_cast<const uint8_t *>(substrate::data(data)), substrate::size(data));
	}

	std::uint16_t bsd_checksum(const std::uint8_t* bytes, std::size_t len) noexcept
	{
		if (!bytes)
			return {};

		std::uint32_t chksum{};
		for (std::size_t i{}; i < len; ++i)
		{
			chksum = (chksum >> 1) + ((chksum & 1) << 15);
			chksum += *(bytes + i);
			chksum &= 0xFFFFU;
		}

		return std::uint16_t(chksum);
	}

	template<typename Sized> inline uint16_t bsd_checksum(const Sized &data) noexcept
	{
		// NOLINTNEXTLINE(cppcoreguidelines-pro-type-reinterpret-cast)
		return bsd_checksum(reinterpret_cast<const uint8_t *>(substrate::data(data)), substrate::size(data));
	}

	// crc32
	namespace
	{
		SUBSTRATE_NOWARN_UNUSED(inline constexpr uint32_t calcPolynomial(const uint8_t bit) noexcept)
			{ return 1U << (31U - bit);	}
		// We cannot use fold expansion here because it exhausts
		// Clang's 512 iterations limit on constexpr calculation
		template<typename T, typename... U>
			inline constexpr enable_if_t<sizeof...(U) != 0, uint32_t> calcPolynomial(T bit, U... bits) noexcept
				{ return calcPolynomial(bit) | calcPolynomial(bits...); }

		template<uint8_t bit> inline constexpr uint32_t calcPolynomial() noexcept { return 1U << (31U - bit); }
		template<uint8_t bit, uint8_t... bits>
			inline constexpr enable_if_t<sizeof...(bits) != 0, uint32_t> calcPolynomial() noexcept
				{ return calcPolynomial<bit>() | calcPolynomial<bits...>(); }

		inline constexpr uint32_t calcTableC(const uint32_t polynomial, const uint32_t byte, const uint8_t bitIdx) noexcept
			{
				return bitIdx ? calcTableC(polynomial, ((byte & 1U) == 1U ? polynomial : 0U) ^ (byte >> 1U), static_cast<uint8_t>(bitIdx - 1U)) : byte;
			}

		// Generate CRC for byte 'n'
		inline constexpr uint32_t calcCrcAtByte(const uint32_t poly, const size_t byte) noexcept
			{ return calcTableC(poly, static_cast<uint32_t>(byte), 8); }

		template<size_t N, uint32_t poly, uint32_t... table> struct calcTable
		{
			constexpr static std::array<const uint32_t, sizeof...(table) + N + 1U> value
			{
				calcTable<N - 1U, poly, calcCrcAtByte(poly, N), table...>::value
			};
		};

		template<uint32_t poly, uint32_t... table> struct calcTable<0, poly, table...>
		{
			constexpr static std::array<const uint32_t, sizeof...(table) + 1> value{{calcCrcAtByte(poly, 0), table...}};
		};
	} // namespace

	struct crc32_t final
	{
	private:
		constexpr static uint32_t poly{calcPolynomial<0U, 1U, 2U, 4U, 5U, 7U, 8U, 10U, 11U, 12U, 16U, 22U, 23U, 26U>()};
		static_assert(poly == 0xEDB88320U, "Polynomial calculation failure");
		SUBSTRATE_CLS_API constexpr static std::array<const uint32_t, 256> crcTable{calcTable<255, poly>::value};

	public:
		static uint32_t crc(const uint8_t *data, size_t dataLen) noexcept
			{
				uint32_t crc{};
				crc ^= std::numeric_limits<decltype(crc)>::max();
				while (dataLen > 0)
				{
					crc = crcTable.at(uint8_t(crc ^ *data++)) ^ (crc >> 8U);
					dataLen--;
				}
				crc ^= std::numeric_limits<decltype(crc)>::max();
				return crc;
			}

		crc32_t() = delete;
	};

	static inline uint32_t crc32(const uint8_t *data, size_t dataLen) noexcept { return crc32_t::crc(data, dataLen); }

	template<typename Sized> static inline uint32_t crc32(const Sized &data) noexcept
		{
			// NOLINTNEXTLINE(cppcoreguidelines-pro-type-reinterpret-cast)
			return crc32(reinterpret_cast<const uint8_t *>(substrate::data(data)), substrate::size(data));
		}
} // namespace substrate

#endif /* SUBSTRATE_HASH */
/* vim: set ft=cpp ts=4 sw=4 noexpandtab: */
