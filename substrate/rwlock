// SPDX-License-Identifier: BSD-3-Clause
#ifndef SUBSTRATE_RWLOCK
#define SUBSTRATE_RWLOCK

#if __cplusplus < 201703L
#error "rwlock is only available on C++17 and above"
#endif

#include <substrate/internal/defs>

#include <utility>
#include <mutex>
#include <shared_mutex>

namespace substrate
{
	template<typename T>
	struct rwlock_t final
	{
	private:
		template<typename U, template<typename> typename lock_t>
		struct lockResult_t final
		{
		private:
			lock_t<std::shared_mutex> _lock;
			U &_obj;

		public:
			constexpr lockResult_t(std::shared_mutex &mut, U &obj) noexcept :
				_lock{mut}, _obj{obj} { }

			SUBSTRATE_NO_DISCARD(U *operator ->() noexcept) { return &_obj; }
			SUBSTRATE_NO_DISCARD(U &operator *() noexcept) { return _obj; }
		};

		using lockro_t = lockResult_t<const T, std::shared_lock>;
		using lockrw_t = lockResult_t<T, std::unique_lock>;
		std::shared_mutex _mutex{};
		T _obj;

	public:
		template<typename ...args_t>
		constexpr rwlock_t(args_t &&...args) noexcept :
			_obj{std::forward<args_t>(args)...} { }

		SUBSTRATE_NO_DISCARD(lockro_t read() noexcept)
		{
			return {_mutex, _obj};
		}
		SUBSTRATE_NO_DISCARD(lockrw_t write() noexcept)
		{
			return {_mutex, _obj};
		}
	};
}

#endif /* SUBSTRATE_RWLOCK */
/* vim: set ft=cpp ts=4 sw=4 noexpandtab: */
